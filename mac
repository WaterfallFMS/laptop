#!/bin/sh
### end common-components/sh-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  echo 'export PATH="$HOME/.bin:$PATH"' >> ~/.bash_profile
  source ~/.bash_profile
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

brew=`which brew`

if [ -z "$brew" ]; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
    brew update

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      echo "\n# recommended by brew doctor" >> ~/.zshrc
      echo "export PATH=\"/usr/local/bin:\$PATH\"\n" >> ~/.zshrc
      source ~/.zshrc
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
  
  fancy_echo "Updating Homebrew"
      brew update
fi
### end mac-components/homebrew

# fancy_echo "Installing Postgres, a good open source relational database ..."
  # brew install postgres --no-python
  # initdb /usr/local/var/postgres -E utf8
  
fancy_echo "Installing Redis, a good key-value database ..."
  brew install redis

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brew install the_silver_searcher

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew install vim

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew install ctags

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brew install tmux

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brew install reattach-to-user-namespace

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew install imagemagick

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  brew install qt

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew install watch

fancy_echo "Installing memcached, to allow rails caching ..."
  brew install memcached
### end mac-components/packages

fancy_echo "Installing Pow ..."
  curl get.pow.cx | sh  
### end mac-components/pow

fancy_echo "Installing rvm, to change Ruby versions ..."
  curl -sSL https://get.rvm.io | bash -s stable
### end common-components/rvm

fancy_echo "Installing GNU Compiler Collection, a necessary prerequisite to installing Ruby ..."
  (brew tap homebrew/dupes)
  brew install apple-gcc42

fancy_echo "Upgrading and linking OpenSSL ..."
  brew install openssl

export CC=gcc-4.2
### end mac-components/compiler-and-libraries

ruby="2.0.0-p353"

fancy_echo "Installing Ruby 2.0.0-p353 ..."
  rvm install $ruby

fancy_echo "Setting Ruby 2.0.0-p353 as global default Ruby ..."
  rvm --default use $ruby

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre

fancy_echo "Installing Rails ..."
  gem install rails --no-document
  
# switch to global gemset for these
  rvm use ${ruby}@global
  
fancy_echo "Installing Powder ..."
  gem install powder

fancy_echo "Installing Foreman ..."
  gem install foreman

fancy_echo "Installing Breakman ..."
  gem install brakeman

# switch back
  rvm use default

fancy_echo "Installing GitHub CLI client ..."
  curl http://hub.github.com/standalone -sLo ~/.bin/hub
  chmod +x ~/.bin/hub
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=`sysctl -n hw.ncpu`
  bundle config --global jobs `expr $number_of_cores - 1`
### end mac-components/bundler

fancy_echo "Installing Heroku CLI client ..."
  brew install heroku-toolbelt

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git

fancy_echo "Installing the heroku-accounts plugin to allow you to have personal heroku accounts."
  heroku plugins:install git://github.com/ddollar/heroku-accounts.git
    
fancy_echo "Installing the heroku-pg-extras plugin to allow "
  heroku plugins:install git://github.com/heroku/heroku-pg-extras.git

fancy_echo "Installing the heroku-pg-transfer plugin to allow pulling DBs from apps."
  heroku plugins:install https://github.com/ddollar/heroku-pg-transfer
### end mac-components/heroku

fancy_echo "Installing rcm, to manage your dotfiles ..."
  (brew tap mike-burns/rcm)
  brew install rcm
### end mac-components/rcm

fancy_echo "####  I N S T A L A T I O N  C O M P L E T E ####"

echo


# postgresql: get the Postgresql app
fancy_echo "Install Postgresql app manually from the URL"
    echo "$ open http://postgresapp.com/"

echo

# heroku accounts set default app
fancy_echo "Setup up heroku for you work account"
    echo "$ heroku accounts:add work --auto"
    echo "$ heroku accounts:default work"

echo

# run breakman every once in a while
fancy_echo "Run breakman to ensure secure rails environments"
    echo "$ rvm use @global"
    echo "$ gem update brakeman"
    echo "$ brakeman <path_to_rails>"

fancy_echo ""
fancy_echo ""### end mac-components/final-message

